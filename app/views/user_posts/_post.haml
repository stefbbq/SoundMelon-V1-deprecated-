- @actor          ||= current_actor
- actor           = @actor
- artist          = post.artist_id.blank? ? nil : post.artist
- user            = post.user_id.blank? ? nil : post.user
- post_item       = post.postitem
- is_newsfeed     = post.is_newsfeed
- buzz_content    = ""

- unless is_newsfeed
  - if post_item
    - buzz_content = capture do
      - if actor
        - if post.artist_album_post?
          = link_to artist_album_buzz_path(post_item.id, :album_name => post_item.name), {:remote => true, :class => 'action-buzz ajaxopen'} do
            %i
            %span buzz
        - elsif post.artist_show_post?
          = link_to artist_show_buzz_path(post_item.artist, post_item.id), {:remote => true, :class => 'action-buzz ajaxopen'} do
            %i
            %span buzz
        - elsif post.song_post?
          = link_to song_buzz_path(post_item), {:remote => true, :class => 'action-buzz ajaxopen'} do
            %i
            %span buzz
        - elsif post.artist_music_post?
          = link_to album_buzz_path(post_item.album_name, post_item.id), {:remote => true, :class => 'action-buzz ajaxopen'} do
            %i
            %span buzz
  
- is_author_artist_profile  = (@artist && artist) && @artist == artist
- is_author_fan_profile     = (@user && user) && @user == user
- self_post                 = is_author_artist_profile || is_author_fan_profile
- hide_thread_link          ||= false
- divclass                  ||=''

- self_owner      = post.user == actor
- self_actor      = user == actor || artist == actor
- item_div_class  = self_owner ? 'content' : 'content-mentioned'

- writer_header = capture do
  - if artist
    = is_author_artist_profile ? artist.name : (link_to artist.name, show_artist_path(artist), :class => 'ajaxopen backable', :remote => :true, :title => artist.name)  
  -elsif user
    = is_author_fan_profile ? user.fname : (link_to user.get_full_name, fan_profile_path(post.user), :class => 'ajaxopen backable', :remote => :true, :title => user.get_full_name)

- content_header = capture do
  - if post.is_newsfeed?
    - if actor
      #{newsfeed_message(post, post_item).first}
    - else
      #{newsfeed_message(post, post_item, 'force-login').first}
  - elsif post.is_bulletin
    has pinned this to their profile
  - elsif post_item
    - if actor
      #{post_message(post, post_item).first}
    - else
      #{post_message(post, post_item, 'force-login').first}
  - else
    wrote this  
  #{timeago(post.created_at)}

- action_section = ''
- unless is_newsfeed
  - action_section = capture do
    - if actor
      - unless buzz_content.blank?
        #{buzz_content}
      - if self_actor
        = link_to user_post_path(post), :method=> :delete, :class => 'action-delete', :remote => true do
          %i
          %span delete
      - else
        = link_to new_post_reply_path(post), :class=>'action-reply ajaxopen', :remote => true do
          %i
          %span reply

= div_for post, {:class => 'entry'} do
  %div{:class=>"#{divclass}"}
    .avatar
      - if user
        - if is_author_fan_profile
          = get_fan_avatar(user)
        - else
          = link_to get_fan_avatar(user), (self_owner ? fan_home_url : fan_profile_path(user) ), :class =>'ajaxopen backable', :remote =>:true
      - elsif artist
        - if is_author_artist_profile
          = get_artist_avatar(artist)
        - else
          = link_to get_artist_avatar(artist), show_artist_path(artist), :class =>'ajaxopen backable', :remote =>:true
    .content
      .header
        .title
          %strong
            #{writer_header}
          %span
            #{content_header}
        .actions
          #{action_section}
      .body
        - if is_newsfeed
          - if actor
            #{newsfeed_message(post, post_item).last}
          - else
            #{newsfeed_message(post, post_item, 'force-login').last}
        - else          
          - if actor
            = post_msg_with_artist_mention(post) unless post.is_newsfeed?
            #{post_message(post, post_item).last}
          - else
            = post_msg_with_artist_mention(post, 'force-login') unless post.is_newsfeed?
            #{post_message(post, post_item, 'force-login').last}
    .clear
    - if post.ancestry && !hide_thread_link && actor
      = link_to 'expand conversation', get_show_conversation_thread_path(post), :remote => true, :class => 'ajaxload thread-expand toggle-thread', :id =>"expand_link_#{post.id}"